{
    "contents" : "#Correlate between-sector spearman's to the difference in transport costs between sectors.\n#Reason: see if similar sectors have similar transport costs\nlibrary(ggplot2)\nlibrary(reshape2)\n\n#Load IO data\n#Stop it from checking variable names - this keeps the X's at bay\nflows <- read.csv(\"domesticUse2010ownMatrix_removingImputedRent_SICcodesInHeaderOnly.csv\", \n                  check.names=FALSE)\n\npercProcess <- function(flows, rowNum, name) {\n  #colSums(flows) is total consumption of that sector\n  val <- (flows[rowNum,]/colSums(flows)) * 100\n  val <- melt(val, variable.name=\"SIC\", value.name=name)\n  return(val)\n}\n\n\n#Find out land transport costs used by each sector as a % of its total consumption\n#Land transport services are 49.3-5\n#We don't have the code for the rows, so it's row 63\n# flows[63,1]\n\n#rail\nrail <- percProcess(flows,62, \"rail\")\n#give rail an index so we can reorder the SICs correctly\n#they're fine here. By the time we get to merge, they're not\n#http://www.r-statistics.com/2012/01/merging-two-data-frame-objects-while-preserving-the-rows-order/\nrail$index <- seq(1:104)\n\nland <- percProcess(flows,63, \"land\")\nwater <- percProcess(flows,64, \"water\")\nair <- percProcess(flows,65, \"air\")\n\n#now combine in annoying way\ntransport <- merge(rail, land, by = \"SIC\")\ntransport <- merge(transport, water, by = \"SIC\")\ntransport <- merge(transport, air, by = \"SIC\")\n\n#correct row order...\ntransport <- transport[order(transport$index),]\n#correct factor order. Possibly\ntransport$SIC <- reorder(transport$SIC, transport$index)\n\nnames <- read.csv(\"domesticUse2010_shortSICnames.csv\")\n\n#refactor short names to the order they're in, not auto-alphabetic\nnames$shortname <- reorder(names$shortname, seq(1:104))\n\n#add SIC short name labels\ntrans <- cbind(transport, names)\n\n#hist(transPerc$percent, breaks=30)\n\n#keep heavy only\n#transPerc <- transPerc[1:58,]\n\n#Variable for distinguishing light from heavy\ntrans$heavy <- \"no\"\ntrans$heavy[1:58] <-\"yes\"\n\n#look at the small 'uns\n#transPerc <- transPerc[transPerc$percent < 7,]\n\ntrans$shortname <- reorder(trans$shortname, -trans$land)\n\n#summary(trans$percent)\n\n#get a transport total per sector for subsetting later\n#http://stackoverflow.com/questions/9651202/sum-variables-within-r-dataframe\ntrans$tots <- rowSums(subset(trans, select=c(\"rail\",\"land\",\"air\",\"water\")))\n\n#melt! \nmeltrans <- melt(trans, id.vars = c(\"SIC\",\"index\",\"shortname\", \"heavy\", \"tots\"), \n                 measure.vars = c(\"rail\",\"land\", \"water\", \"air\"),\n                                  variable.name=\"mode\",\n                                  value.name=\"percent\")\n\nmeltrans$shortname <- reorder(meltrans$shortname, -meltrans$percent)\n\n#subset some different graphs\n# transub <- meltrans[meltrans$tots < 1.5,]\n# transub <- meltrans[meltrans$tots < 5 & meltrans$tots > 1.5,]\ntransub <- meltrans[meltrans$tots > 5,]\n\n\nprinty <- ggplot(transub, aes(x=shortname, y=percent, fill = mode)) +\n  #   scale_y_continuous(trans=log2_trans()) +  \n  #     scale_y_continuous(trans=log2_trans(), breaks=c(2,4,8,16,30,60,120,400,1500,4500,16000)) +  \n  #   coord_cartesian(xlim = c(0, 10)) +\n  ggtitle(\"per-sector water/waste buying\") +\n  theme(plot.title = element_text(lineheight=1.5, face=\"bold\")) +\n  xlab(\"\") +\n  # ylab(\"percent\") +\n  ylab(\"percent\") +\n  # theme(axis.text = element_text(angle = 90, hjust = 1, vjust = -1)) +\n  coord_flip() +\n  geom_bar(stat=\"identity\")#, colour=\"black\"\n#   geom_bar(stat=\"identity\", aes(fill=heavy), colour=\"white\")\n#   geom_bar()\n\nprinty\n\n#stacked bars\n#ggsave(printy, file=\"transport.jpg\", width=5, height=7, dpi = 600)\n",
    "created" : 1434465499135.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "632306576",
    "id" : "4C32DFB4",
    "lastKnownWriteTime" : 1439644114,
    "path" : "C:/Users/geodo/Dropbox/R/Workspace/SupplyUseMatrix/transportCostsFromDomesticUseIO2010.R",
    "project_path" : "transportCostsFromDomesticUseIO2010.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}