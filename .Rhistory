val <- val * seq(from = 6, to = 0.5, length.out = length(val))
val <- val + runif(length(val),-0.5,0.5)
plot(val)
output <- ggplot(val, aes(x = val))
val <- sin(seq(from = pi, to = pi*2, length.out = 40))
val <- val * seq(from = 6, to = 0.5, length.out = length(val))
plot(val)
val <- sin(seq(from = pi, to = pi*2, length.out = 40))
val <- val * seq(from = 6, to = 0.5, length.out = length(val))
val <- val + runif(length(val),-0.5,0.5)
plot(val)
pl <- data.frame(dribble = val, age = seq(1:40))
pl <- data.frame(dribble = val, age = seq(1:40))
output <- ggplot(pl, aes(x = age, y = dribble))
output
output <- ggplot(pl, aes(x = age, y = dribble)) +
geom_point()
output
output <- ggplot(pl, aes(x = age, y = dribble)) +
geom_point() +
xkcdaxis()
output <- ggplot(pl, aes(x = age, y = dribble)) +
geom_point() +
xkcdaxis(xrange = 40, yrange = 40)
output <- ggplot(pl, aes(x = age, y = dribble)) +
geom_point() +
xkcdaxis(xrange = range(pl$age), yrange = range(pl$dribble))
output
download.file("http://simonsoftware.se/other/xkcd.ttf",
+ dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("cp xkcd.ttf ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
download.file("http://simonsoftware.se/other/xkcd.ttf",
dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("cp xkcd.ttf ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
output <- ggplot(pl, aes(x = age, y = dribble)) +
geom_point() +
xkcdaxis(xrange = range(pl$age), yrange = range(pl$dribble))
output
download.file("http://simonsoftware.se/other/xkcd.ttf",
dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("cp xkcd.ttf ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
download.file("http://simonsoftware.se/other/xkcd.ttf",
dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("cp xkcd.ttf ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
library(xkcd)
library(ggplot2)
library(extrafont)
output <- ggplot(pl, aes(x = age, y = dribble)) +
geom_point() +
xkcdaxis(xrange = range(pl$age), yrange = range(pl$dribble))
output
library(ggplot2)
dat <- data.frame(
group = rep(c("Above", "Below"), each=10),
x = rep(1:10, 2),
y = c(runif(20, 0, 100))
)
View(dat)
?aggregate
1 +
2
1
+ 2
dat <- data.frame(x = seq(1:10), y=runif(10))
dat <- data.frame(x = seq(1:10), y=runif(10))
ggplot(dat, aes(x = x, y = y) +
geom_point()
ggplot(dat, aes(x = x, y = y)) +
geom_point()
ggplot(dat, aes(x = x, y = y)) +
geom_point()
ggplot(dat, aes(x = x, y = y))
+ geom_point()
mw <- 6.5
#inflation
inf <- 0.02
100 * inf
mw <- 6.5
#increments through inflation
mwi <- mw
#inflation
inf <- 0.02
for(yr in 2015:2020) {
mwi = mwi + (mwi * inf)
}
mwi
?subset
?"%in"
?%in%
?boxplot.stats
(1+2+3+4) - (5+6+7+8)
(1-5)+(2-6)+(3-7)+(4-8)
243*58
#Correlate between-sector spearman's to the difference in transport costs between sectors.
#Reason: see if similar sectors have similar transport costs
library(ggplot2)
library(reshape2)
#Load IO data
#Stop it from checking variable names - this keeps the X's at bay
flows <- read.csv("domesticUse2010ownMatrix_removingImputedRent_SICcodesInHeaderOnly.csv",
check.names=FALSE)
percProcess <- function(flows, rowNum, name) {
#colSums(flows) is total consumption of that sector
val <- (flows[rowNum,]/colSums(flows)) * 100
val <- melt(val, variable.name="SIC", value.name=name)
return(val)
}
#Find out land transport costs used by each sector as a % of its total consumption
#Land transport services are 49.3-5
#We don't have the code for the rows, so it's row 63
# flows[63,1]
#rail
rail <- percProcess(flows,62, "rail")
#give rail an index so we can reorder the SICs correctly
#they're fine here. By the time we get to merge, they're not
#http://www.r-statistics.com/2012/01/merging-two-data-frame-objects-while-preserving-the-rows-order/
rail$index <- seq(1:104)
land <- percProcess(flows,63, "land")
water <- percProcess(flows,64, "water")
air <- percProcess(flows,65, "air")
#now combine in annoying way
transport <- merge(rail, land, by = "SIC")
transport <- merge(transport, water, by = "SIC")
transport <- merge(transport, air, by = "SIC")
#correct row order...
transport <- transport[order(transport$index),]
#correct factor order. Possibly
transport$SIC <- reorder(transport$SIC, transport$index)
names <- read.csv("domesticUse2010_shortSICnames.csv")
#refactor short names to the order they're in, not auto-alphabetic
names$shortname <- reorder(names$shortname, seq(1:104))
#add SIC short name labels
trans <- cbind(transport, names)
#hist(transPerc$percent, breaks=30)
#keep heavy only
#transPerc <- transPerc[1:58,]
#Variable for distinguishing light from heavy
trans$heavy <- "no"
trans$heavy[1:58] <-"yes"
#look at the small 'uns
#transPerc <- transPerc[transPerc$percent < 7,]
trans$shortname <- reorder(trans$shortname, -trans$land)
#summary(trans$percent)
#get a transport total per sector for subsetting later
#http://stackoverflow.com/questions/9651202/sum-variables-within-r-dataframe
trans$tots <- rowSums(subset(trans, select=c("rail","land","air","water")))
#melt!
meltrans <- melt(trans, id.vars = c("SIC","index","shortname", "heavy", "tots"),
measure.vars = c("rail","land", "water", "air"),
variable.name="mode",
value.name="percent")
meltrans$shortname <- reorder(meltrans$shortname, -meltrans$percent)
#subset some different graphs
# transub <- meltrans[meltrans$tots < 1.5,]
# transub <- meltrans[meltrans$tots < 5 & meltrans$tots > 1.5,]
transub <- meltrans[meltrans$tots > 5,]
#stacked bars
printy <- ggplot(transub, aes(x=shortname, y=percent, fill = mode)) +
#   scale_y_continuous(trans=log2_trans()) +
#     scale_y_continuous(trans=log2_trans(), breaks=c(2,4,8,16,30,60,120,400,1500,4500,16000)) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle("per-sector transport costs") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
xlab("") +
ylab("percent") +
#   theme(axis.text = element_text(angle = 90, hjust = 1)) +
coord_flip() +
geom_bar(stat="identity")#, colour="black"
#   geom_bar(stat="identity", aes(fill=heavy), colour="white")
#   geom_bar()
printy
head(transub)
data(iris)
irisu
iris
head(iris)
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length)) +
scale_color_discrete(breaks="setosa")
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
?aggregate
#Correlate between-sector spearman's to the difference in transport costs between sectors.
#Reason: see if similar sectors have similar transport costs
library(ggplot2)
library(reshape2)
#Load IO data
#Stop it from checking variable names - this keeps the X's at bay
flows <- read.csv("domesticUse2010ownMatrix_removingImputedRent_SICcodesInHeaderOnly.csv",
check.names=FALSE)
percProcess <- function(flows, rowNum, name) {
#colSums(flows) is total consumption of that sector
val <- (flows[rowNum,]/colSums(flows)) * 100
val <- melt(val, variable.name="SIC", value.name=name)
return(val)
}
#Find out land transport costs used by each sector as a % of its total consumption
#Land transport services are 49.3-5
#We don't have the code for the rows, so it's row 63
# flows[63,1]
#rail
rail <- percProcess(flows,62, "rail")
#give rail an index so we can reorder the SICs correctly
#they're fine here. By the time we get to merge, they're not
#http://www.r-statistics.com/2012/01/merging-two-data-frame-objects-while-preserving-the-rows-order/
rail$index <- seq(1:104)
land <- percProcess(flows,63, "land")
water <- percProcess(flows,64, "water")
air <- percProcess(flows,65, "air")
#now combine in annoying way
transport <- merge(rail, land, by = "SIC")
transport <- merge(transport, water, by = "SIC")
transport <- merge(transport, air, by = "SIC")
#correct row order...
transport <- transport[order(transport$index),]
#correct factor order. Possibly
transport$SIC <- reorder(transport$SIC, transport$index)
names <- read.csv("domesticUse2010_shortSICnames.csv")
#refactor short names to the order they're in, not auto-alphabetic
names$shortname <- reorder(names$shortname, seq(1:104))
#add SIC short name labels
trans <- cbind(transport, names)
#hist(transPerc$percent, breaks=30)
#keep heavy only
#transPerc <- transPerc[1:58,]
#Variable for distinguishing light from heavy
trans$heavy <- "no"
trans$heavy[1:58] <-"yes"
#look at the small 'uns
#transPerc <- transPerc[transPerc$percent < 7,]
trans$shortname <- reorder(trans$shortname, -trans$land)
#summary(trans$percent)
#get a transport total per sector for subsetting later
#http://stackoverflow.com/questions/9651202/sum-variables-within-r-dataframe
trans$tots <- rowSums(subset(trans, select=c("rail","land","air","water")))
#melt!
meltrans <- melt(trans, id.vars = c("SIC","index","shortname", "heavy", "tots"),
measure.vars = c("rail","land", "water", "air"),
variable.name="mode",
value.name="percent")
meltrans$shortname <- reorder(meltrans$shortname, -meltrans$percent)
#subset some different graphs
# transub <- meltrans[meltrans$tots < 1.5,]
# transub <- meltrans[meltrans$tots < 5 & meltrans$tots > 1.5,]
transub <- meltrans[meltrans$tots > 5,]
#stacked bars
printy <- ggplot(transub, aes(x=shortname, y=percent, fill = mode)) +
#   scale_y_continuous(trans=log2_trans()) +
#     scale_y_continuous(trans=log2_trans(), breaks=c(2,4,8,16,30,60,120,400,1500,4500,16000)) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle("per-sector transport costs") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
xlab("") +
ylab("percent") +
#   theme(axis.text = element_text(angle = 90, hjust = 1)) +
coord_flip() +
geom_bar(stat="identity")#, colour="black"
#   geom_bar(stat="identity", aes(fill=heavy), colour="white")
#   geom_bar()
printy
#ggsave(printy, file="transport.jpg", width=5, height=7, dpi = 600)
printy <- ggplot(transub, aes(x=shortname, y=percent, fill = mode), colour="white") +
#   scale_y_continuous(trans=log2_trans()) +
#     scale_y_continuous(trans=log2_trans(), breaks=c(2,4,8,16,30,60,120,400,1500,4500,16000)) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle("per-sector transport costs") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
xlab("") +
ylab("percent") +
#   theme(axis.text = element_text(angle = 90, hjust = 1)) +
coord_flip() +
geom_bar(stat="identity")#, colour="black"
#   geom_bar(stat="identity", aes(fill=heavy), colour="white")
#   geom_bar()
printy
printy <- ggplot(transub, aes(x=shortname, y=percent, fill = mode)) +
#   scale_y_continuous(trans=log2_trans()) +
#     scale_y_continuous(trans=log2_trans(), breaks=c(2,4,8,16,30,60,120,400,1500,4500,16000)) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle("per-sector transport costs") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
xlab("") +
ylab("percent") +
#   theme(axis.text = element_text(angle = 90, hjust = 1)) +
coord_flip() +
geom_bar(stat="identity", colour="white")#, colour="black"
#   geom_bar(stat="identity", aes(fill=heavy), colour="white")
#   geom_bar()
printy
printy <- ggplot(transub, aes(x=shortname, y=percent, fill = mode)) +
#   scale_y_continuous(trans=log2_trans()) +
#     scale_y_continuous(trans=log2_trans(), breaks=c(2,4,8,16,30,60,120,400,1500,4500,16000)) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle("per-sector transport costs") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
xlab("") +
ylab("percent") +
#   theme(axis.text = element_text(angle = 90, hjust = 1)) +
coord_flip() +
geom_bar(stat="identity")#, colour="black"
#   geom_bar(stat="identity", aes(fill=heavy), colour="white")
#   geom_bar()
printy
242*58
data <- data.frame(ttwa = c(1:5), coal = c(1:5), elec = c(1:5))
data <- matrix(data)
data
data <- data.frame(ttwa = c(1:5), coal = c(1:5), elec = c(1:5))
data
data <- as.matrix(data)
data
data.pca <- prcomp[data[,2:3]]
data.pca <- prcomp(data[,2:3])
summary(data)
print(data)
summary(data.pca)
#Mess with PCA
print(data.pca)
biplot(data.pca)
biplot(data.pca, expand = 1)
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
data <- as.matrix(data)
data.pca <- prcomp(data[,2:3])
summary(data.pca)
plot(data)
plot(data$coal, data$elec)
data
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
plot(data$coal, data$elec)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data
result <- data.pca$x
result
data.pca$rotation
biplot(data.pca)
data <- data.frame(ttwa = c(5:1), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(5:1))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1.5))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(5.1))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
#Mess with PCA
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(5:1))
plot(data$coal, data$elec)
data <- as.matrix(data)
plot(data[,2], data[,3])
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(5:1))
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(5:1))
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(5:1))
plot(data$coal, data$elec)
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
plot(data$coal, data$elec)
data.pca$x
results <- data.pca$x
results
plot(results)
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5), agri = c(1:5))
data.pca <- prcomp(data[,2:3])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data.pca$rotation
data.pca$x
results <- data.pca$x
plot(results)
biplot(data.pca, expand = 1)
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5), agri = c(1:5))
data <- as.matrix(data)
data.pca <- prcomp(data[,2:3])
summary(data.pca)
biplot(data.pca, expand = 1)
data.pca <- prcomp(data[,2:4])
summary(data.pca)
print(data.pca)
biplot(data.pca, expand = 1)
data <- data.frame(ttwa = c(1:5), coal = rep(1,times=5), elec = c(1:5), agri = c(1:5))
data <- data.frame(ttwa = c(1:5), coal = rep(1,times=5), elec = rep(1,times=5), agri = rep(1,times=5))
data <- as.matrix(data)
data <- data.frame(ttwa = c(1:5), coal = rep(1,times=5), elec = rep(1,times=5), agri = rep(1,times=5))
#plot(data$coal, data$elec)
data <- as.matrix(data)
data.pca <- prcomp(data[,2:4])
summary(data.pca)
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5), agri = c(1:5))
data <- as.matrix(data)
data.pca <- prcomp(data[,2:4])
resultsr <- data.pca$rotation
plot(resultsr)
resultsr
data <- data.frame(ttwa = c(1:5), coal = c(1,2,3,3.5,4.5), elec = c(1:5))
data <- as.matrix(data)
data.pca <- prcomp(data[,2:4])
results <- data.pca$x
resultsr <- data.pca$rotation
plot(resultsr)
data.pca <- prcomp(data[,2:3])
results <- data.pca$x
resultsr <- data.pca$rotation
plot(resultsr)
resultsr
biplot(data.pca, expand = 1)
?aggregate
4*8
